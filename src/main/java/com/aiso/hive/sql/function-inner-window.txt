    应用场景：
        分区排序
        动态Group By
        Top N
        累计计算
        层次查询
--------------------------------------------------------------------
        first_value(money) over (partition by id order by money rows between 1 preceding and 1 following)
        first_value(money) over (partition by id order by money rows between unbouded preceding and 1 following)

        取值范围：
        between 1 preceding and 1 following
        前面行
        当前行
        后面的行

        三个行取最小值
--------------------------------------------------------------------
        lag(money,3) 向前查 距离为n的值
-------------------------------------------------------------------
        lead(money,2) over (order by money)

        当前行后面的行数 前后查 距离为2的money的值

        距离我为2的当前的值

--------------------------------------------------------------------
        rank over(partition by id order by money) 排序
        select id,money,rank() over(partition by id order by money) from ...

总的记录数上+1  按顺序开始



-----------------------------------------------------------
dense_rank() 排序 获得每条记录的行号

前面最大的行号上+1

不同于rank的地方

rank 前面记录数 +1

------------------------------------------------------------------
cume_dist() over (partition by id order by money)
((相同值最大行号)/(每个分区的行数))
当前的值 的比例


select id,money,cume_dist() over (partition by id order by money)
from winfunctions

-----------------------------------------------
percent_rank() over (partition by id order by money)
((相同值最小行号-1)/(每个分区的行数-1))



第一个总是从0开始的

select id,money,cume_dist() over (partition by id order by money),

percent_rank() over (partition by id order by money)

from winfunc;



-------------------------------------
ntitle(2) over (order by money desc nulls last)  每个分区分成多少片

select id,money,ntile(2) over (partition by id order by money desc) from winfunc


--------------------------------------










窗口函数

可以计算一定范围内、一定值域内、或者一段时间内的累积和以及移动平均值等。
可以结合聚集函数SUM() 、AVG() 等使用。
可以结合FIRST_VALUE() 和LAST_VALUE()，返回窗口的第一个和最后一个值



窗口函数应用场景：
（1）用于分区排序
（2）动态Group By
（3）Top N
（4）累计计算
（5）层次查询


（1）计算累计和

eg：统计1-12月的累积销量，即1月为1月份的值，2月为1.2月份值的和，3月为123月份的和，12月为1-12月份值的和

SELECT
month,
SUM(amount) month_amount,
SUM( SUM(amount)) OVER
(ORDER BY month ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
AS cumulative_amount FROM table_name GROUP BY month ORDER BY month;

SUM( SUM(amount)) 内部的SUM(amount)为需要累加的值，在上述可以换为 month_amount

ORDER BY month 按月份对查询读取的记录进行排序，就是窗口范围内的排序

ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW 定义起点和终点，UNBOUNDED PRECEDING 为起点，表明从第一行开始, CURRENT ROW为默认值，就是这一句等价于：

ROWS UNBOUNDED PRECEDING

PRECEDING：在前 N 行的意思。

FOLLOWING：在后 N 行的意思。

//计算前3个月之间的和

SUM( SUM(amount)) OVER (ORDER BY month ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS cumulative_amount
也可以

SUM( SUM(amount)) OVER (ORDER BY month 3 PRECENDING) AS cumulative_amount
前后一个月之间的和

SUM( SUM(amount)) OVER (ORDER BY month ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS cumulative_amount
窗体第一条和最后一条的值

FIRST_VALUE(SUM(amount)) OVER (ORDER BY month ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS xxxx;LAST_VALUE(SUM(amount)) OVER (ORDER BY month ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS xxxx;
三、LAG、LEAD

获得相对于当前记录指定距离的那条记录的数据

LAG()为向前、LEAD()为向后

LAG(column_name1,1) OVER(ORDER BY column_name2)LEAG(column_name1,1) OVER(ORDER BY column_name2)
这样就获得前一条、后一条的数据

四、FIRST、LAST

获得一个排序分组中的第一个值和组后一个值。可以与分组函数结合

SELECTMIN(month) KEEP(DENSE_RANK FIRST ORDER BY SUM(amount)) AS highest_sales_month,MIN(month) KEEP(DENSE_RANK LAST ORDER BY SUM(amount)) AS lows_sales_monthFROM table_nameGROUP BY monthORDER BY month;
这样就可以求得一年中销量最高和最低的月份。

输出的是月份，但是用SUM(amount)来判断。
顶


需要指定一个窗口的边界，语法是这样的：

ROWS betweenCURRENT ROW | UNBOUNDED PRECEDING | [num] PRECEDING AND  UNBOUNDED FOLLOWING | [num] FOLLOWING| CURRENT ROW

或

RANGE between [num] PRECEDING  AND [num]FOLLOWING

ROWS是物理窗口，从行数上控制窗口的尺寸的；

RANGE是逻辑窗口，从列值上控制窗口的尺寸。这个比较难理解，但说白了就简单了，具体解释如下面栗子1.

结合order by子句使用，如果在order by子句后面没有指定窗口子句，则默认为：range between unbounded preceding and current row

------------------------------------------------------------

rt_data表存放了当天每半小时的店铺销售数据

字段stat_date格式yyMMddHHmm

------------------------------------------------------------

1.统计截止到当前时间段的店铺累计销售金额


select shop_id, stat_date, ordamt, sum(ordamt) over(partition by shop_id order by stat_date)
from rt_data
where dt = '2015-01-11' and shop_id = 10026;

10026   201501120030    5170    5170
10026   201501120100    5669    10839
10026   201501120130    2396    13235
10026   201501120200    1498    14733
10026   201501120230    1997    16730
10026   201501120300    1188    17918
10026   201501120330    598 18516
10026   201501120400    479 18995
10026   201501120430    1587    20582
10026   201501120530    799 21381
这里order by 后面省去了窗口子句，还原起来就是order by stat_date range between unbounded preceding and current row. 这是什么意思？

就是先按stat_date排序，窗口就是比当前stat_date小的行到当前stat_date的行。

其实，这里写成order by stat_date rows between unbounded preceding and current row是一样的。

2.统计每个时间段的销售占比
select shop_id, stat_date, ordamt, ordamt / sum(ordamt) over(partition by shop_id)
from rt_data
where dt = '2015-01-11' and shop_id = 10026
order by stat_date;

10026   201501120900    5406    0.014227
10026   201501120930    13098   0.034471
10026   201501121000    15679   0.041263
10026   201501121030    12134   0.031934
10026   201501121100    26259   0.069107
10026   201501121130    16516   0.043466
10026   201501121200    20127   0.052969
partition by之后没有使用order by，窗口大小默认就是整个分组。

3.找出2点的销售金额及前半小时的销售金额和后1个小时的销售金额
select * from (
    select
        shop_id,
        stat_date,
        ordamt,
        lag(stat_date,1) over(partition by shop_id order by stat_date),
        lag(ordamt,1) over(partition by shop_id order by stat_date),
        lead(stat_date,2) over(partition by shop_id order by stat_date),
        lead(ordamt,2) over(partition by shop_id order by stat_date)
    from rt_data
    where dt = '2015-01-11' and shop_id = 10026
) t
where stat_date = 201501120200;

10026   201501120200    1498    201501120130    2396    201501120300    1188
lag(field, N)是取前N行的值，lead(field, N)是取后N行的值。

4.按照销售金额进行排名，金额最大的排最前（limit可以取topn的数）


select shop_id, stat_date, ordamt, dense_rank() over(partition by shop_id order by ordamt desc)
from rt_data
where dt = '2015-01-11' and shop_id = 10026;

10026   201501121100    26259.0 1
10026   201501121200    20127.0 2
10026   201501121300    18138.0 3
10026   201501121130    16516.0 4
10026   201501121400    15956.0 5
10026   201501121000    15679.0 6
10026   201501122200    14290.0 7
10026   201501121430    14203.0 8
10026   201501121330    13290.0 9
10026   201501120930    13098.0 10
dense_rank和rank都是排名函数，区别在于dense_rank是连续排名，rank遇到排名并列时，下一列排名跳空。

percent_rank，介于0和1直接的小数形式表示，计算方法是(rank - 1) / (n-1)，其中rank为行的序号，n为组的行数，这个暂时不知道有什么地方可以运用，欢迎指导。

5.按销售金额排序，取出前20%的时间段和相应金额


select * from (
    select shop_id, stat_date, ordamt, ntile(5) over(partition by shop_id order by ordamt desc) sorted
    from rt_data
    where dt = '2015-01-11' and shop_id = 10026
) t
where sorted = 1;

10026   201501121100    26259.0 1
10026   201501121200    20127.0 1
10026   201501121300    18138.0 1
10026   201501121130    16516.0 1
10026   201501121400    15956.0 1
10026   201501121000    15679.0 1
10026   201501122200    14290.0 1
10026   201501121430    14203.0 1
10026   201501121330    13290.0 1
NTILE这个很强大，以前要获取一定比例的数据是非常困难的，NTILE就是把有序分区中的行分发到指定数据的组中，各个组有编号，编号从1开始，对于每一行，NTILE返回此行所属的组的编号。
---------------------------------------------------------------------

over语句还可以独立出来，用window重写，

但需要注意的是，
如下sort by使用了多个字段，

如果用range指定窗口的话会出错，
需要用rows来指定窗口，因为range是对列的比较，不支持多列比较。


select shop_id, stat_date, ordamt, sum(ordamt) over win as t
from rt_data
where dt = '2015-01-11' and shop_id = 10026
window win as (distribute by shop_id sort by shop_id, ordamt desc rows between unbounded preceding and current row);


开放端口




































===================================================

-############################Windowing functions
-- LEAD
-- The number of rows to lead can optionally be specified. If the number of rows to lead is not specified, the lead is one row.
-- Returns null when the lead for the current row extends beyond the end of the window.
-- LAG
-- The number of rows to lag can optionally be specified. If the number of rows to lag is not specified, the lag is one row.
-- Returns null when the lag for the current row extends before the beginning of the window.
-- FIRST_VALUE
-- LAST_VALUE
-- The OVER clause
-- OVER with standard aggregates:
COUNT
SUM
MIN
MAX
AVG
-- OVER with a PARTITION BY statement with one or more partitioning columns of any primitive datatype.
-- OVER with PARTITION BY and ORDER BY with one or more partitioning and/or ordering columns of any datatype.
-- OVER with a window specification. Windows can be defined separately in a WINDOW clause. Window specifications support these standard options:
ROWS ((CURRENT ROW) | (UNBOUNDED | [num]) PRECEDING) AND (UNBOUNDED | [num]) FOLLOWING


SELECT a, SUM(b) OVER w
FROM T
WINDOW w AS (PARTITION BY c ORDER BY d ROWS UNBOUNDED PRECEDING);



SELECT a, LEAD(a) OVER (PARTITION BY b ORDER BY C ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING)
FROM T;



SELECT a, LAG(a, 3, 0) OVER (PARTITION BY b ORDER BY C ROWS 3 PRECEDING)
FROM T;


SELECT a, COUNT(distinct a) OVER (PARTITION BY b)
FROM T;

--##########################Analytics functions

RANK
ROW_NUMBER
DENSE_RANK
CUME_DIST
PERCENT_RANK
NTILE


-- Distinct support in Hive 2.1.0 and later (see HIVE-9534)
COUNT(DISTINCT a) OVER (PARTITION BY c)

SELECT rank() OVER (ORDER BY sum(b))
FROM T
GROUP BY a;

SELECT a, COUNT(b) OVER (PARTITION BY c)
FROM T;

PARTITION BY with two partitioning columns, no ORDER BY or window specification
SELECT a, COUNT(b) OVER (PARTITION BY c, d)
FROM T;

PARTITION BY with one partitioning column, one ORDER BY column, and no window specification
SELECT a, SUM(b) OVER (PARTITION BY c ORDER BY d)
FROM T;

PARTITION BY with two partitioning columns, two ORDER BY columns, and no window specification
SELECT a, SUM(b) OVER (PARTITION BY c, d ORDER BY e, f)
FROM T;

PARTITION BY with partitioning, ORDER BY, and window specification
SELECT a, SUM(b) OVER (PARTITION BY c ORDER BY d ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM T;

SELECT a, AVG(b) OVER (PARTITION BY c ORDER BY d ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)
FROM T;

SELECT a, AVG(b) OVER (PARTITION BY c ORDER BY d ROWS BETWEEN 3 PRECEDING AND 3 FOLLOWING)
FROM T;

SELECT a, AVG(b) OVER (PARTITION BY c ORDER BY d ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
FROM T;


SELECT
 a,
 COUNT(b) OVER (PARTITION BY c),
 SUM(b) OVER (PARTITION BY c)
FROM T;



SELECT
 a,
 COUNT(b) OVER (PARTITION BY c) AS b_count,
 SUM(b) OVER (PARTITION BY c) b_sum
FROM T;







select p_mfgr, p_name, p_size,
rank() as r,
denserank() as dr,
sum(p_retailprice) as s1 over (rows between unbounded preceding and current row),
sum(p_retailprice) over (w1)
from noop(part
distribute by p_mfgr
sort by p_name)
having r < 4
window w1 as rows between 2 preceding and 2 following




============================
org.apache.hadoop.hive.ql.exe.FunctionRegistry

    registerHiveUDAFsAsWindowFunctions();
    registerWindowFunction("row_number", new GenericUDAFRowNumber());  --row_number实现类
    registerWindowFunction("rank", new GenericUDAFRank());
    registerWindowFunction("dense_rank", new GenericUDAFDenseRank());
    registerWindowFunction("percent_rank", new GenericUDAFPercentRank());
    registerWindowFunction("cume_dist", new GenericUDAFCumeDist());
    registerWindowFunction("ntile", new GenericUDAFNTile());
    registerWindowFunction("first_value", new GenericUDAFFirstValue());
    registerWindowFunction("last_value", new GenericUDAFLastValue());
    registerWindowFunction(LEAD_FUNC_NAME, new GenericUDAFLead(), false);
    registerWindowFunction(LAG_FUNC_NAME, new GenericUDAFLag(), false);

二、使用示例

数据提取目标：从tmp_test表中根据col1字段去重，选取clo2最大的那条记录，导入tmp_test_c表。

1、创建测试表
create table tmp_test(col1 string,clo2 string);

2、添加测试数据
insert into table tmp_test
select 1,'str1' from dual
union all
select 2,'str2' from dual
union all
select 3,'str3' from dual
union all
select 3,'str31' from dual
union all
select 3,'str33' from dual
union all
select 4,'str41' from dual
union all
select 4,'str42' from dual;

注意：dual 为在Hive上创建的表。


3、查看测试数据
select * from tmp_test;

col1    clo2
-----   ------
1    str1
2    str2
3    str3
3    str31
3    str33
4    str41
4    str42

4、使用row_number()函数查询数据
select t.*,row_number() over(distribute by col1 sort by clo2 desc) rn
from tmp_test t;

col1    clo2    rn
-----   ------  ----
1    str1    1
2    str2    1
3    str33    1
3    str31    2
3    str3    3
4    str42    1
4    str41    2


5、将目标数据存入临时表中

drop table tmp_test_c;
create table tmp_test_c
as
select *
from
(
select t.*,row_number() over(distribute by col1 sort by clo2 desc) rn
from tmp_test t
)tt
where tt.rn=1;

select * from tmp_test_c;

col1    clo2    rn
-----   ------  ----
1    str1    1
2    str2    1
3    str33    1
4    str42    1


6、创建一张表，将数据添加到该表中
create table tmp_test_d(col1 string,clo2 string);

insert into table tmp_test_d
select col1,clo2
from
(
select t.*,row_number() over(distribute by col1 sort by clo2 desc) rn
from tmp_test t
)tt
where tt.rn=1;

select * from tmp_test_d;
col1    clo2
-----   ------
1    str1
2    str2
3    str33
4    str42


三、总结
以上方面对于Hive版本是高版本的可以，但在低版本，却会报错，不会执行：如：

select col1,clo2
from
(
select t.*,row_number() over(distribute by col1 sort by clo2 desc) rn
from tmp_test t
)tt
where tt.rn=1;

错误：FAILED: NullPointerException null

低版本是不支持这种写法的，需要写在row_number()的括号里面，调整成如下方式才可以执行：

select col1,clo2,row_number(clo2) as rn
from
(select col1,clo2
from tmp_test
distribute by col1
sort by clo2 desc) a
where row_number(clo2)=1;


四、附录
row_number() 函数在Oracle中的用法：
select col1,clo2
from
(
select t.*,row_number() over(partition by col1 order by clo2 desc) rn
from tmp_test t
)
where rn=1;














